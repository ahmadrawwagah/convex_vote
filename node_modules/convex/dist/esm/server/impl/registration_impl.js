"use strict";
import { convexToJson, jsonToConvex } from "../../values/index.js";
import { setupActionDatabaseClient } from "./actions_impl.js";
import { setupActionAuth, setupAuth } from "./authentication_impl.js";
import { setupReader, setupWriter } from "./database_impl.js";
import { setupHttpCalls } from "./http_impl.js";
import { QueryImpl, QueryInitializerImpl } from "./query_impl.js";
import {
  setupActionScheduler,
  setupMutationScheduler
} from "./scheduler_impl.js";
import {
  setupStorageHttpWriter,
  setupStorageReader,
  setupStorageWriter
} from "./storage_impl.js";
async function invokeMutation(func, argsStr) {
  const args = jsonToConvex(JSON.parse(argsStr));
  const mutationCtx = {
    db: setupWriter(),
    auth: setupAuth(),
    storage: setupStorageWriter(),
    scheduler: setupMutationScheduler()
  };
  const result = await Promise.resolve(func(mutationCtx, ...args));
  validateReturnValue(result);
  return JSON.stringify(convexToJson(result === void 0 ? null : result));
}
function validateReturnValue(v) {
  if (v instanceof QueryInitializerImpl || v instanceof QueryImpl) {
    throw new Error(
      "Return value is a Query. Results must be retrieved with `.collect()`, `.take(n), `.unique()`, or `.first()`."
    );
  }
}
export const mutationGeneric = (func) => {
  const m = func;
  if (m.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  m.isRegistered = true;
  m.isMutation = true;
  m.isPublic = true;
  m.invokeMutation = (argsStr) => invokeMutation(func, argsStr);
  return m;
};
export const internalMutationGeneric = (func) => {
  const m = func;
  if (m.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  m.isRegistered = true;
  m.isMutation = true;
  m.isInternal = true;
  m.invokeMutation = (argsStr) => invokeMutation(func, argsStr);
  return m;
};
async function invokeQuery(func, argsStr) {
  const args = jsonToConvex(JSON.parse(argsStr));
  const queryCtx = {
    db: setupReader(),
    auth: setupAuth(),
    storage: setupStorageReader()
  };
  const result = await Promise.resolve(func(queryCtx, ...args));
  validateReturnValue(result);
  return JSON.stringify(convexToJson(result === void 0 ? null : result));
}
export const queryGeneric = (func) => {
  const q = func;
  if (q.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  q.isRegistered = true;
  q.isQuery = true;
  q.isPublic = true;
  q.invokeQuery = (argsStr) => invokeQuery(func, argsStr);
  return q;
};
export const internalQueryGeneric = (func) => {
  const q = func;
  if (q.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  q.isRegistered = true;
  q.isQuery = true;
  q.isInternal = true;
  q.invokeQuery = (argsStr) => invokeQuery(func, argsStr);
  return q;
};
async function invokeAction(func, requestId, argsStr) {
  const args = jsonToConvex(JSON.parse(argsStr));
  const databaseClient = setupActionDatabaseClient(requestId);
  const ctx = {
    runQuery: databaseClient.runQuery,
    runMutation: databaseClient.runMutation,
    auth: setupActionAuth(requestId),
    scheduler: setupActionScheduler(requestId)
  };
  const result = await Promise.resolve(func(ctx, ...args));
  return JSON.stringify(convexToJson(result === void 0 ? null : result));
}
export const actionGeneric = (func) => {
  const q = func;
  if (q.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  q.isRegistered = true;
  q.isAction = true;
  q.isPublic = true;
  q.invokeAction = (requestId, argsStr) => invokeAction(func, requestId, argsStr);
  return q;
};
export const internalActionGeneric = (func) => {
  const q = func;
  if (q.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  q.isRegistered = true;
  q.isAction = true;
  q.isInternal = true;
  q.invokeAction = (requestId, argsStr) => invokeAction(func, requestId, argsStr);
  return q;
};
async function invokeHttpEndpoint(func, request) {
  const calls = setupHttpCalls();
  const ctx = {
    ...calls,
    auth: setupAuth(),
    storage: setupStorageHttpWriter()
  };
  return await Promise.resolve(func(ctx, request));
}
export const httpEndpointGeneric = (func) => {
  const q = func;
  if (q.isRegistered) {
    throw new Error("Function registered twice " + func);
  }
  q.isRegistered = true;
  q.isHttp = true;
  q.invokeHttpEndpoint = (request) => invokeHttpEndpoint(func, request);
  return q;
};
//# sourceMappingURL=registration_impl.js.map
