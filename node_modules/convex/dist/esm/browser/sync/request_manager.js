"use strict";
import { jsonToConvex } from "../../values/index.js";
import { createError, logToConsole } from "../logging.js";
export class RequestManager {
  constructor() {
    this.inflightRequests = /* @__PURE__ */ new Map();
  }
  request(message, sent) {
    const result = new Promise((resolve, reject) => {
      const status = sent ? "Requested" : "NotSent";
      this.inflightRequests.set(message.requestId, {
        message,
        status: { status, onResult: resolve, onFailure: reject }
      });
    });
    return result;
  }
  onResponse(response) {
    const requestInfo = this.inflightRequests.get(response.requestId);
    if (requestInfo === void 0) {
      return null;
    }
    if (requestInfo.status.status === "Completed") {
      return null;
    }
    const udfType = requestInfo.message.type === "Mutation" ? "mutation" : "action";
    const udfPath = requestInfo.message.udfPath;
    for (const line of response.logLines) {
      logToConsole("info", udfType, udfPath, line);
    }
    const status = requestInfo.status;
    let onResolve;
    if (response.success) {
      onResolve = () => status.onResult(jsonToConvex(response.result));
    } else {
      logToConsole("error", udfType, udfPath, response.result);
      onResolve = () => status.onFailure(createError(udfType, udfPath, response.result));
    }
    if (response.type === "ActionResponse" || !response.success) {
      onResolve();
      this.inflightRequests.delete(response.requestId);
      return response.requestId;
    }
    requestInfo.status = {
      status: "Completed",
      ts: response.ts,
      onResolve
    };
    return null;
  }
  removeCompleted(ts) {
    const completeRequests = /* @__PURE__ */ new Set();
    for (const [requestId, requestInfo] of this.inflightRequests.entries()) {
      const status = requestInfo.status;
      if (status.status === "Completed" && status.ts.lessThanOrEqual(ts)) {
        status.onResolve();
        completeRequests.add(requestId);
        this.inflightRequests.delete(requestId);
      }
    }
    return completeRequests;
  }
  restart() {
    const allMessages = [];
    for (const [requestId, value] of this.inflightRequests) {
      if (value.status.status === "NotSent") {
        value.status.status = "Requested";
        allMessages.push(value.message);
        continue;
      }
      if (value.message.type === "Mutation") {
        allMessages.push(value.message);
      } else {
        this.inflightRequests.delete(requestId);
        const udfPath = value.message.udfPath;
        if (value.status.status === "Completed") {
          throw new Error("Action should never be in 'Completed' state");
        }
        value.status.onFailure(
          createError("action", udfPath, "Transient error")
        );
      }
    }
    return allMessages;
  }
  hasIncompleteRequests() {
    for (const requestInfo of this.inflightRequests.values()) {
      if (requestInfo.status.status === "Requested") {
        return true;
      }
    }
    return false;
  }
  hasInflightRequests() {
    return this.inflightRequests.size > 0;
  }
}
//# sourceMappingURL=request_manager.js.map
