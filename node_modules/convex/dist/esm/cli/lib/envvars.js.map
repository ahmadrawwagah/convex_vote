{
  "version": 3,
  "sources": ["../../../../src/cli/lib/envvars.ts"],
  "sourcesContent": ["/**\n * Help the developer store the CONVEX_URL environment variable.\n */\nimport chalk from \"chalk\";\nimport * as dotenv from \"dotenv\";\n\nimport inquirer from \"inquirer\";\nimport { Context } from \"./context\";\nimport { loadPackageJson } from \"./utils\";\n\nconst FRAMEWORKS = [\"create-react-app\", \"Next.js\", \"Vite\", \"Remix\"] as const;\nexport type Framework = typeof FRAMEWORKS[number];\n\nexport async function suggestedEnvVarName(ctx: Context): Promise<{\n  detectedFramework?: Framework;\n  envVar: string;\n}> {\n  // no package.json, that's fine, just guess\n  if (!ctx.fs.exists(\"package.json\")) {\n    return {\n      envVar: \"CONVEX_URL\",\n    };\n  }\n\n  const packages = await loadPackageJson(ctx);\n\n  // Is it create-react-app?\n  const isCreateReactApp = \"react-scripts\" in packages;\n  if (isCreateReactApp) {\n    return {\n      detectedFramework: \"create-react-app\",\n      envVar: \"REACT_APP_CONVEX_URL\",\n    };\n  }\n\n  const isNextJs = \"next\" in packages;\n  if (isNextJs) {\n    return {\n      detectedFramework: \"Next.js\",\n      envVar: \"NEXT_PUBLIC_CONVEX_URL\",\n    };\n  }\n\n  const isRemix = \"@remix-run/dev\" in packages;\n  if (isRemix) {\n    return {\n      detectedFramework: \"Remix\",\n      envVar: \"CONVEX_URL\",\n    };\n  }\n\n  // Vite is a dependency of a lot of things; vite appearing in dependencies is not a strong indicator.\n  const isVite = \"vite\" in packages;\n  if (isVite) {\n    return {\n      detectedFramework: \"Vite\",\n      envVar: \"VITE_CONVEX_URL\",\n    };\n  }\n\n  return {\n    envVar: \"CONVEX_URL\",\n  };\n}\n\nfunction suggestedProdEnvFile(ctx: Context): {\n  existing: boolean;\n  envFile: string;\n} {\n  // The most prod-looking env file that exists, or .env\n  if (ctx.fs.exists(\".env.production\")) {\n    return {\n      existing: true,\n      envFile: \".env.production\",\n    };\n  }\n  if (ctx.fs.exists(\".env\")) {\n    return {\n      existing: true,\n      envFile: \".env\",\n    };\n  }\n  return {\n    existing: false,\n    envFile: \".env\",\n  };\n}\n\nfunction suggestedDevEnvFile(\n  ctx: Context,\n  framework?: Framework\n): {\n  existing: boolean;\n  envFile: string;\n} {\n  // If a .env.local file exists, that's unequivocally the right file\n  if (ctx.fs.exists(\".env.local\")) {\n    return {\n      existing: true,\n      envFile: \".env.local\",\n    };\n  }\n\n  // Remix is on team \"don't commit the .env file,\" so .env is for dev.\n  if (framework === \"Remix\") {\n    return {\n      existing: ctx.fs.exists(\".env\"),\n      envFile: \".env\",\n    };\n  }\n\n  // The most dev-looking env file that exists, or .env.local\n  return {\n    existing: ctx.fs.exists(\".env.local\"),\n    envFile: \".env.local\",\n  };\n}\n\nconst EXPECTED_NAMES = new Set([\n  \"CONVEX_URL\",\n  \"NEXT_PUBLIC_CONVEX_URL\",\n  \"VITE_CONVEX_URL\",\n  \"REACT_APP_CONVEX_URL\",\n]);\n\nexport async function offerToWriteToEnv(\n  ctx: Context,\n  type: \"dev\" | \"prod\",\n  value: string,\n  saveUrl: \"yes\" | \"no\" | \"ask\" = \"ask\" as const\n) {\n  if (saveUrl === \"no\") return;\n\n  const { detectedFramework, envVar } = await suggestedEnvVarName(ctx);\n  if (detectedFramework) {\n    console.error(chalk.green(`Detected ${detectedFramework} project.`));\n  }\n\n  if (detectedFramework === \"Remix\" && type === \"prod\") {\n    console.error(\n      `Remix does not recommend saving production environment variables in the repository, so we won't save it to a .env file.`\n    );\n    return;\n  }\n\n  const { envFile, existing } =\n    type === \"dev\"\n      ? suggestedDevEnvFile(ctx, detectedFramework)\n      : suggestedProdEnvFile(ctx);\n\n  if (existing) {\n    const config = dotenv.parse(ctx.fs.readUtf8File(envFile));\n\n    console.error(`Found ${envFile} file.`);\n\n    const matching = Object.keys(config).filter(key => EXPECTED_NAMES.has(key));\n    if (matching.length > 1) {\n      console.error(\n        chalk.yellow(\n          `Found multiple CONVEX_URL environment variables in ${envFile} so cannot update automatically.`\n        )\n      );\n      return;\n    }\n    if (matching.length === 1) {\n      const [envVar, oldValue] = [matching[0], config[matching[0]]];\n      if (oldValue === value) {\n        console.error(\n          chalk.green(`${envVar} in ${envFile} is already ${value}`)\n        );\n        return;\n      }\n      if (Object.values(config).filter(v => v === oldValue).length !== 1) {\n        chalk.yellow(`Can't safely modify ${envFile}, please edit manually.`);\n        return;\n      }\n      if (\n        saveUrl === \"yes\" ||\n        (\n          await inquirer.prompt([\n            {\n              type: \"confirm\",\n              name: \"updateEnvFile\",\n              message: `Update ${envVar} in ${envFile} to ${value} to save ${type} URL?`,\n              default: true,\n            },\n          ])\n        ).updateEnvFile\n      ) {\n        const modified = ctx.fs.readUtf8File(envFile).replace(oldValue, value);\n        ctx.fs.writeUtf8File(envFile, modified);\n        console.error(\n          chalk.green(`Updated ${envFile} with ${envVar}=\"${value}\"`)\n        );\n        return;\n      }\n      console.error(\n        chalk.yellow(`Please update ${envFile} with ${envVar}=\"${value}\"`)\n      );\n      return;\n    }\n\n    if (\n      saveUrl === \"yes\" ||\n      (\n        await inquirer.prompt([\n          {\n            type: \"confirm\",\n            name: \"updateEnvFile\",\n            message: `Add ${envVar} to ${envFile} to save ${type} URL?`,\n            default: true,\n          },\n        ])\n      ).updateEnvFile\n    ) {\n      const orig = ctx.fs.readUtf8File(envFile);\n      const modified = `${orig}\\n${envVar}=\"${value}\"\\n`;\n      ctx.fs.writeUtf8File(envFile, modified);\n      console.error(\n        chalk.green(`Updated ${envFile} with ${envVar}=\"${value}\"`)\n      );\n    }\n    return;\n  }\n\n  // Finally, offer to create a new .env file\n  if (\n    saveUrl === \"yes\" ||\n    (\n      await inquirer.prompt([\n        {\n          type: \"confirm\",\n          name: \"updateEnvFile\",\n          message: `Create a ${envFile} file and add ${envVar} to save ${type} URL?`,\n          default: true,\n        },\n      ])\n    ).updateEnvFile\n  ) {\n    const contents = `${envVar}=\"${value}\"\\n`;\n    ctx.fs.writeUtf8File(envFile, contents);\n    console.error(chalk.green(`Wrote ${envFile} file to save ${envVar}.`));\n    return;\n  }\n}\n\nexport function buildEnvironment(): string | boolean {\n  return process.env.VERCEL\n    ? \"Vercel\"\n    : process.env.NETLIFY\n    ? \"Netlify\"\n    : false;\n}\n"],
  "mappings": "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",
  "names": ["envVar"]
}
